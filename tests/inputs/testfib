:NEW_ITERATION           // Если пользователь ввел число > 0, то программа работает заново
IN                       // Номер нужного члена последовательности фиббоначи
POPR RCX
PUSHR RCX
PUSH 0
JA :IF_ABOVE_OR_EQUAL    // Если номер члена <= 0, то программа прекращает работу
HLT
:IF_ABOVE_OR_EQUAL
PUSH 0
POPR RAX
PUSH 1                   // Добавление первых членов последовательности 0 и 1
POPR RBX
CALL :FIBONACCI
PUSHR RBX                // Вывод n-ного члена последовательности Фиббоначи
OUT
JMP :NEW_ITERATION
:FIBONACCI
PUSHR RCX
PUSH 1
JA :IF_ABOVE
RET                      // Если n <= 1, то происходит базовый случай
:IF_ABOVE                // Иначе выполняется рекурсия fib(n - 1) + fib(n - 2)
PUSHR RAX
PUSHR RBX
ADD
POPR RDX                 // Считает сумму RDX = RAX + RBX
PUSHR RCX
PUSH 1
SUB       
POPR RCX                 // Значение регистра RAX уменьшается на 1
CALL :SWAP
CALL :FIBONACCI          // Рекурсивно вызывается заново
:SWAP                    // Меняет числа в регистрах местами
PUSHR RBX  
POPR RAX                 // RAX = RBX
PUSHR RDX
POPR RBX                 // RBX = RDX(временная переменная)
RET
