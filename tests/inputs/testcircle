IN
POP RAX               // Радиус круга
PUSH 0
POP RBX               // Индекс в памяти
PUSH 40
POP RFX               // Колонна, в которой находится центра круга
PUSH 20
POP RGX               // Ряд, в котором находится центра круга
PUSH RAX
PUSH 19
JA :EXIT              // Если радиус больше допустимого, то выход
:LOOP
PUSH RBX
PUSH 3200             // Размер памяти
JAE :EXIT             // Если индекс в памяти больше допустимого, цикл прерывается
PUSH RBX
PUSH 80               // Длина ряда
DIV
POP RCX               // Номер ряда текущей точки
PUSH RBX
PUSH RCX
PUSH 80
MUL
SUB
POP RDX               // Номер колонны текущей точки
CALL :Q_EQUATION      // Считает дистанцию от центра круга до точки (в REX)
PUSH REX
PUSH RAX
PUSH RAX
MUL
PUSH 4
MUL
JA :DOT               // Если расстояние меньше либо равно радиусу, то переход
PUSH REX
PUSH RAX
PUSH RAX
MUL
JB :DOT
CALL :LOAD_HASHTAG
JMP :CONTINUE
:DOT
CALL :LOAD_DOT        // Запись хештега
:CONTINUE
CALL :INCREMENT_RBX
JMP :LOOP             // Новая итерация цикла
:Q_EQUATION 
PUSH RCX
PUSH RGX
SUB
PUSH RCX
PUSH RGX
SUB
MUL
PUSH 4
MUL
PUSH RDX
PUSH RFX
SUB
PUSH RDX
PUSH RFX
SUB
MUL
ADD
POP REX
RET
:INCREMENT_RBX         // Увеличивает значение в регистре RBX на 1
PUSH RBX
PUSH 1
ADD
POP RBX
RET
:LOAD_HASHTAG
PUSH 35
POP [RBX]
RET
:LOAD_DOT
PUSH 46
POP [RBX]
RET
:EXIT
DRAW 0                 // Вывод памяти
HLT
