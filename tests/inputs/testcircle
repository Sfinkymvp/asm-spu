IN
POPR RAX      // Радиус круга
PUSH 0
POPR RBX      // Индекс в памяти
PUSH 40
POPR RFX      // Колонна, в которой находится центра круга
PUSH 15
POPR RGX      // Ряд, в котором находится центра круга
PUSHR RAX
PUSH 15
JA :EXIT      // Если радиус больше допустимого, то выход
:LOOP
PUSHR RBX
PUSH 2560     // Размер памяти
JAE :EXIT     // Если индекс в памяти больше допустимого, цикл прерывается
PUSHR RBX
PUSH 80       // Длина ряда
DIV
POPR RCX      // Номер ряда текущей точки
PUSHR RBX
PUSHR RCX
PUSH 80
MUL
SUB
POPR RDX      // Номер колонны текущей точки
CALL :DISTANCE      // Считает дистанцию от центра круга до точки (в REX)
PUSHR REX
PUSHR RAX
JA :DOT  // Если расстояние меньше либо равно радиусу, то переход
PUSHR REX
PUSHR RAX
PUSH 2
DIV
JB :DOT
CALL :LOAD_HASHTAG
JMP :CONTINUE
:DOT
CALL :LOAD_DOT // Запись хештега
:CONTINUE
CALL :INCREMENT_RBX
JMP :LOOP       // Новая итерация цикла
:DISTANCE 
PUSHR RCX
PUSHR RGX
SUB
PUSHR RCX
PUSHR RGX
SUB
MUL
PUSHR RDX
PUSHR RFX
SUB
PUSHR RDX
PUSHR RFX
SUB
MUL
ADD
SQRT
POPR REX
RET
:INCREMENT_RBX // Увеличивает значение в регистре RBX на 1
PUSHR RBX
PUSH 1
ADD
POPR RBX
RET
:LOAD_HASHTAG
PUSH 35
POPM [RBX]
RET
:LOAD_DOT
PUSH 46
POPM [RBX]
RET
:EXIT
DRAW 0        // Вывод памяти
HLT
